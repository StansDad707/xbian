#!/bin/bash
#
#Copyright 2012 CurlyMo <development@xbian.org>
#
#Resize SD function is based on the corresponding function in raspi-config
#The overclocking function is copied from raspi-config
#raspi-config is created by Alex Bradbury <asb@asbradbury.org>
#
#This file is part of XBian - XBMC on the Raspberry Pi.
#
#XBian is free software: you can redistribute it and/or modify it under the
#terms of the GNU General Public License as published by the Free Software
#Foundation, either version 3 of the License, or (at your option) any later
#version.
#
#XBian is distributed in the hope that it will be useful, but WITHOUT ANY
#WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
#FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#details.
#
#You should have received a copy of the GNU General Public License along
#with XBian. If not, see <http://www.gnu.org/licenses/>
#
#TODO: Check if packages are already installed

if [ ! $(id -u) -eq 0 ]; then
	echo "This program must be run as root.";
	exit 0;
fi

# Global variables
BACKTITLE="XBian $(cat /etc/xbian_version)";

DEBUG=0;
DISABLE_ROOTSSH=0;
ASKFORREBOOT=0;
PACKAGELOCATION=0;
PACKAGEDBUPDATED=0;
ORIGINALIFS=$IFS;
APTBASE="http://apt.xbian.org/dists/wheezy/main/binary-armhf/"
BASEPATH="/usr/local/include/xbian-config"

# Source sub scripts
source $BASEPATH/functions
source $BASEPATH/prereqs
source $BASEPATH/dialogs

close() {
	if [ $ASKFORREBOOT -eq 1 ]; then
		showyesno	"Reboot?" \
					"\n  A reboot is required. Do you want to reboot now?";
		case "$?" in
			0)
				if [ $DEBUG -eq 0 ]; then
					rm -rf /tmp/xbianpackages
					rm -rf /tmp/xbiancache
				fi
				echo 1 | sudo tee /proc/sys/vm/drop_caches >/dev/null
				reboot;
			;;
			1)
				if [ $DEBUG -eq 0 ]; then
					rm -rf /tmp/xbianpackages
					rm -rf /tmp/xbiancache
				fi
				echo 1 | sudo tee /proc/sys/vm/drop_caches >/dev/null
				exit 0
			;;
		esac
	else
		if [ $DEBUG -eq 0 ]; then
			rm -rf /tmp/xbianpackages
			rm -rf /tmp/xbiancache
		fi
		echo 1 | sudo tee /proc/sys/vm/drop_caches >/dev/null
		exit 0
	fi
}

function menu() {

	# Do different things depending on which level we are
	if [ $1 -eq 0 ]; then
		# Show root level
		LEVEL="";
		ADD=".";
	else
		# Show descendant
		LEVEL="$2";
		ADD=".";
	fi

	I=1;
	ITEMS="";

	# Prepare path
	if [ $# -gt 2 ]; then
		CPATH=$3;
	else
		CPATH='Config';
	fi

	CPATH=$(echo -e "$CPATH" | sed 's/^\ //;s/\ $//');

	# Draw menu
	IFS=$'\n';
	ITEMS=$(cat $BASEPATH/struct | grep ^$(echo $LEVEL$ADD[0-9])*: | sed 's/\(.*\)\.\(\.*[0-9].\)\{1,\}/\2/' | sed 's/\([0-9]\)\(:\)\([a-zA-Z0-9\ \ %,-\"\*]\{1,\}\)\(:\)\([a-zA-Z0-9\ %,-\"\*]\{1,\}\)\(:\)/\1%\3!-!"\5"%:/' | cut -f1 -d: | sed ':a;N;$!ba;s/\n//g' | awk '{print substr($0,0,length)}');
	
	echo 1 | sudo tee /proc/sys/vm/drop_caches >/dev/null
	#Execute script
	if [ -z "$ITEMS" ]; then
		ITEMS=$(cat $BASEPATH/struct | grep ^$(echo $LEVEL$ADD[0-9])*:);
		FILE=$(cat $BASEPATH/struct | grep ^$(echo $LEVEL | awk '{print substr($0,0,length)}'): | rev | cut -f1 -d: | rev);
		CLEVEL=$(cat $BASEPATH/struct | grep ^$(echo $LEVEL | awk '{print substr($0,0,length)}'): | rev | cut -f3 -d: | rev | sed 's/\ *$//g');

		source $BASEPATH/scripts/$FILE

		$FILE "${CPATH% > *} > $CLEVEL";
		IFS=$'\n';
		menu $(($1-1)) $(echo $LEVEL | awk '{print substr($0,0,length-1)}') ${CPATH% > *};
	else
		IFS="%";
		showmenu $CPATH "" "$ITEMS" 6;
		if [ $? -eq 1 ]; then
			if [ $1 -eq 0 ]; then
				close;
			else
				IFS=$'\n';
				menu $(($1-1)) $(echo $LEVEL | awk '{print substr($0,0,length-1)}') ${CPATH% > *};
			fi
		else
			IFS=$'\n';
			menu $(($1+1)) $LEVEL$RETURN$ADD  "$CPATH > $(cat $BASEPATH/struct | grep ^$(echo $LEVEL$RETURN)*: | cut -f2 -d: | sed 's/\ *$//g')";
		fi;
	fi;

}

#Run script inside screen, so it's doesn't fill the whole terminal history
#SCREEN=$(screen -r | grep "Attached" | wc -l);
#if [ $SCREEN -eq 0 ]; then
#	`screen $0`
#else
	menu 0 "";
#fi
